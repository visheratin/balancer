// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Curve is an autogenerated mock type for the Curve type
type Curve struct {
	mock.Mock
}

// Bits provides a mock function with given fields:
func (_m *Curve) Bits() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Decode provides a mock function with given fields: code
func (_m *Curve) Decode(code uint64) ([]uint64, error) {
	ret := _m.Called(code)

	var r0 []uint64
	if rf, ok := ret.Get(0).(func(uint64) []uint64); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecodeWithBuffer provides a mock function with given fields: buf, code
func (_m *Curve) DecodeWithBuffer(buf []uint64, code uint64) ([]uint64, error) {
	ret := _m.Called(buf, code)

	var r0 []uint64
	if rf, ok := ret.Get(0).(func([]uint64, uint64) []uint64); ok {
		r0 = rf(buf, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uint64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]uint64, uint64) error); ok {
		r1 = rf(buf, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DimensionSize provides a mock function with given fields:
func (_m *Curve) DimensionSize() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Dimensions provides a mock function with given fields:
func (_m *Curve) Dimensions() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

// Encode provides a mock function with given fields: coords
func (_m *Curve) Encode(coords []uint64) (uint64, error) {
	ret := _m.Called(coords)

	var r0 uint64
	if rf, ok := ret.Get(0).(func([]uint64) uint64); ok {
		r0 = rf(coords)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]uint64) error); ok {
		r1 = rf(coords)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Length provides a mock function with given fields:
func (_m *Curve) Length() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}
